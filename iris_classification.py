# -*- coding: utf-8 -*-
"""Iris classification

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RI5w79jYinFGrJyZa38yIRLdZBgD_uT5
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

df = pd.read_csv('/content/Iris.csv')

df.head()

df.info()

df.describe()

df.duplicated().sum()

df.isnull().sum()

df['Species'].value_counts()

sns.pairplot(df, hue='Species')

# Separate features and target
data = df.values
X = data[:,0:4]
Y = data[:,4]

# Calculate average of each features for all classes
Y_Data = np.array([np.average(X[:, i][Y==j].astype('float32')) for i in range (X.shape[1])
 for j in np.unique(Y)])
# the size of Y_Data should be 12, however it's 88
# This might happen because np.unique(Y) is not what's expected
# Let's check the unique values in Y to see if it matches our expectation
print(np.unique(Y))
# adjust the Y_Data calculation based on the actual unique values of Y
# e.g., if np.unique(Y) returns 3 values, you can modify the code as:
Y_Data = np.array([np.average(X[:, i][Y==j].astype('float32')) for i in range (X.shape[1])
 for j in np.unique(Y)[:3]]) # select the first 3 unique values

# now Y_Data should have the expected size of 12, and you can reshape it
Y_Data_reshaped = Y_Data.reshape(4, 3)
Y_Data_reshaped = np.swapaxes(Y_Data_reshaped, 0, 1)
X_axis = np.arange(len(df.columns)-1) # Assuming you want to exclude 'Species' column
width = 0.25

# Plot the average
# X_axis is changed to have the correct number of elements (4)
X_axis = np.arange(len(df.columns) - 2)  # Exclude 'Id' and 'Species' columns for 4 features
plt.bar(X_axis, Y_Data_reshaped[0], width, label='Setosa')
plt.bar(X_axis + width, Y_Data_reshaped[1], width, label='Versicolour')
plt.bar(X_axis + width * 2, Y_Data_reshaped[2], width, label='Virginica')
plt.xticks(X_axis, df.columns[1:5])  # Set x-axis labels to feature names, excluding 'Id' and 'Species'
plt.xlabel("Features")
plt.ylabel("Value in cm.")
plt.legend(bbox_to_anchor=(1.3, 1))
plt.show()

# Split dataset into features (X) and target (y)
X = df.drop(columns=['Species'])  # Features
y = df['Species']  # Target variable

# Train-test split (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.preprocessing import LabelEncoder

# Example: Encoding the 'Species' column
le = LabelEncoder()
df['Species'] = le.fit_transform(df['Species'])

# Check encoding
print(df['Species'].unique())

df.head()

rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
y_pred_rf = rf.predict(X_test)

print("Random Forest Accuracy:", accuracy_score(y_test, y_pred_rf))
print(classification_report(y_test, y_pred_rf))

svm = SVC(kernel='linear')  # Linear Kernel
svm.fit(X_train, y_train)
y_pred_svm = svm.predict(X_test)

print("SVM Accuracy:", accuracy_score(y_test, y_pred_svm))
print(classification_report(y_test, y_pred_svm))

print(f"Random Forest Accuracy: {accuracy_score(y_test, y_pred_rf):.4f}")
print(f"SVM Accuracy: {accuracy_score(y_test, y_pred_svm):.4f}")

print(svn)  # Check model details
print("Classes:", np.unique(y_train))  # Ensure all classes are present in training data

print("Class distribution in training set:")
print(pd.Series(y_train).value_counts())

# Get feature importance
feature_importance = rf.feature_importances_

# Print feature importance for each feature
for i, feature in enumerate(feature_columns):
    print(f"{feature}: {feature_importance[i]}")

from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
import pandas as pd
# Get a data point for Iris-versicolor
versicolor_data = df[df['Species'] == 1].iloc[0, :-1].values  # Exclude 'Species' column, use encoded value
# Convert it to the format expected by your model and make predictions
X_new = versicolor_data.reshape(1, -1)  # Reshape to (1, number_of_features)

# Assuming X_train, y_train, df, and X_new are already defined

# Standardize the data
# Include all feature columns during scaling
feature_columns = df.columns[:-1]  # All columns except 'Species'
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train[feature_columns])

# Create DataFrame for new data with the correct columns
X_new_df = pd.DataFrame(X_new, columns=feature_columns)

# Transform new data using the trained scaler
X_new_scaled = scaler.transform(X_new_df)

# Train the Random Forest Classifier
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train_scaled, y_train)

# Predict on new data
prediction = rf.predict(X_new_scaled)
print("Random Forest Prediction of Species:", prediction)